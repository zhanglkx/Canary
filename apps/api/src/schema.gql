# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthResponse {
  accessToken: String!
  user: User!
}

type Category {
  color: String!
  createdAt: DateTime!
  description: String
  icon: String!
  id: ID!
  name: String!
  todos: [Todo!]
  updatedAt: DateTime!
  user: User!
}

type CategoryStats {
  color: String!
  completedCount: Int!
  icon: String!
  id: ID!
  name: String!
  todoCount: Int!
}

type Comment {
  author: User!
  content: String!
  createdAt: DateTime!
  id: ID!
  todo: Todo!
  updatedAt: DateTime!
}

input CreateCategoryInput {
  color: String
  description: String
  icon: String
  name: String!
}

input CreateCommentInput {
  content: String!
  todoId: String!
}

input CreateTagInput {
  color: String
  name: String!
}

input CreateTodoInput {
  categoryId: ID
  description: String
  dueDate: String
  priority: Priority
  title: String!
}

type DashboardData {
  categoryStats: [CategoryStats!]!
  recentTodosCount: Int!
  todoStats: TodoStats!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  addTagToTodo(tagId: ID!, todoId: ID!): Todo!

  """创建新分类"""
  createCategory(createCategoryInput: CreateCategoryInput!): Category!
  createComment(createCommentInput: CreateCommentInput!): Comment!
  createTag(createTagInput: CreateTagInput!): Tag!
  createTodo(createTodoInput: CreateTodoInput!): Todo!
  deleteComment(id: ID!): Boolean!
  deleteTag(id: ID!): Boolean!
  login(loginInput: LoginInput!): AuthResponse!
  register(registerInput: RegisterInput!): AuthResponse!

  """删除分类"""
  removeCategory(id: ID!): Boolean!
  removeTagFromTodo(tagId: ID!, todoId: ID!): Todo!
  removeTodo(id: ID!): Boolean!

  """更新分类信息"""
  updateCategory(id: ID!, updateCategoryInput: UpdateCategoryInput!): Category!
  updateComment(content: String!, id: ID!): Comment!
  updateTodo(id: ID!, updateTodoInput: UpdateTodoInput!): Todo!
}

"""Todo 优先级"""
enum Priority {
  HIGH
  LOW
  MEDIUM
  URGENT
}

type Query {
  advancedSearch(keyword: String, priorities: [String!], sortBy: String): [Todo!]!

  """获取用户所有分类"""
  categories: [Category!]!

  """根据ID获取分类详情"""
  category(id: ID!): Category!
  categoryStats: [CategoryStats!]!
  comments(todoId: ID!): [Comment!]!
  dashboard: DashboardData!
  me: User!
  searchTodos(filter: TodoFilterInput): [Todo!]!
  tag(id: ID!): Tag!
  tags: [Tag!]!
  todo(id: ID!): Todo!
  todoStats: TodoStats!
  todos: [Todo!]!
  user(id: ID!): User!
  users: [User!]!
}

input RegisterInput {
  email: String!
  password: String!
  username: String!
}

type Tag {
  color: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  todos: [Todo!]
  user: User!
}

type Todo {
  category: Category
  comments: [Comment!]
  completed: Boolean!
  createdAt: DateTime!
  description: String
  dueDate: String
  id: ID!
  priority: Priority!
  tags: [Tag!]
  title: String!
  updatedAt: DateTime!
  user: User!
}

input TodoFilterInput {
  categoryId: String
  completed: Boolean
  keyword: String
  priority: String
  tagId: String
}

type TodoStats {
  completed: Int!
  completionPercentage: Int!
  highCount: Int!
  lowCount: Int!
  mediumCount: Int!
  overdueCount: Int!
  pending: Int!
  total: Int!
  urgentCount: Int!
}

input UpdateCategoryInput {
  color: String
  description: String
  icon: String
  name: String
}

input UpdateTodoInput {
  categoryId: ID
  completed: Boolean
  description: String
  dueDate: String
  priority: Priority
  title: String
}

type User {
  categories: [Category!]
  createdAt: DateTime!
  email: String!
  id: ID!
  todos: [Todo!]
  updatedAt: DateTime!
  username: String!
}